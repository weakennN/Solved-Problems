
package MultidimensionalArrays;
import java.util.Scanner;


public class Bee {

    public static class BeeSpot {

        static int row = 0;
        static int col = 0;

    }

    static int flowers = 0;

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        boolean flag = false,
                isLost = false;

        char[][] matrix = fillMatrix(scan);

        String command = "v";

        while (!(command = scan.nextLine().toLowerCase()).equals("end")) {
            if (command.equals("right"))
                isLost = horizontal(matrix, 1);
            else if (command.equals("left"))
                isLost = horizontal(matrix, -1);
            else if (command.equals("up"))
                isLost = vertical(matrix, -1);
            else if (command.equals("down"))
                isLost = vertical(matrix, 1 );

            if(isLost){
                System.out.println("The bee got lost!");
                break;
            }
        }

        if (flowers >= 5) {
            System.out.printf("Great job, the bee manage to pollinate %d flowers!%n", flowers);
        } else {
            System.out.printf("The bee couldn't pollinate the flowers, she needed %d flowers more%n", 5 - flowers);
        }
        printMatrix(matrix);

    }

    public static char[][] fillMatrix(Scanner scan) {

        int row = Integer.parseInt(scan.nextLine());

        char[][] matrix = new char[row][row];

        for (int i = 0; i < row; i++) {
            String info = scan.nextLine();
            for (int j = 0; j < row; j++) {
                matrix[i][j] = info.charAt(j);
                if(matrix[i][j] == 'B') {
                    BeeSpot.row = i;
                    BeeSpot.col = j;
                }
            }
        }

        return matrix;
    }

    public static boolean horizontal(char[][] matrix, int plus) {

        matrix[BeeSpot.row][BeeSpot.col] = '.';
        if (BeeSpot.col + plus >= matrix.length || BeeSpot.col + plus < 0) {
            return true;
        }

        BeeSpot.col = BeeSpot.col + plus;
        if (matrix[BeeSpot.row][BeeSpot.col] == 'O') {
            matrix[BeeSpot.row][BeeSpot.col] = '.';
            BeeSpot.col = BeeSpot.col + plus;
        }

        if (matrix[BeeSpot.row][BeeSpot.col] == 'f') {
            flowers++;
        }
        matrix[BeeSpot.row][BeeSpot.col] = 'B';

        return false;
    }

    public static boolean vertical(char[][] matrix, int plus) {

        matrix[BeeSpot.row][BeeSpot.col] = '.';
        if (BeeSpot.row + plus >= matrix.length || BeeSpot.row + plus < 0) {
            return true;
        }

        BeeSpot.row = BeeSpot.row + plus;
        if (matrix[BeeSpot.row][BeeSpot.col] == 'O') {
            matrix[BeeSpot.row][BeeSpot.col] = '.';
            BeeSpot.row = BeeSpot.row + plus;
        }

        if (matrix[BeeSpot.row][BeeSpot.col] == 'f') {
            flowers++;
        }

        matrix[BeeSpot.row][BeeSpot.col] = 'B';

        return false;
    }

    public static void printMatrix(char[][] matrix) {

        for (int row = 0; row < matrix.length; row++) {

            for (int col = 0; col < matrix[row].length; col++) {
                System.out.print(matrix[row][col]);
            }
            System.out.println();
        }
    }


}
